"""
CADAgent Add-on Fusion 360 Utilities
Helper functions for working with Fusion 360 API.
"""

import adsk.core
import adsk.fusion
import os
from pathlib import Path


class SpaceFusionUtils:
    """
    Utility functions for Fusion 360 operations.
    Following best practices for API usage.
    """
    
    def __init__(self):
        self.app = adsk.core.Application.get()
        self.ui = self.app.userInterface
        # Get the add-in directory for .env file storage
        self.addon_dir = Path(__file__).parent.parent
        self.env_file_path = self.addon_dir / '.env'
    
    def _read_env_file(self):
        """
        Read the .env file and return a dictionary of key-value pairs.
        
        Returns:
            dict: Dictionary of environment variables
        """
        env_vars = {}
        if self.env_file_path.exists():
            try:
                with open(self.env_file_path, 'r', encoding='utf-8') as f:
                    for line in f:
                        line = line.strip()
                        if line and not line.startswith('#') and '=' in line:
                            key, value = line.split('=', 1)
                            # Remove quotes if present
                            value = value.strip().strip('"').strip("'")
                            env_vars[key] = value
            except Exception as e:
                self.app.log(f'CADAgent: Error reading .env file: {e}')
        return env_vars
    
    def _write_env_file(self, env_vars):
        """
        Write environment variables to the .env file.
        
        Args:
            env_vars (dict): Dictionary of environment variables to write
            
        Returns:
            bool: True if successful
        """
        try:
            # Ensure the directory exists
            self.addon_dir.mkdir(parents=True, exist_ok=True)
            
            # Write the .env file
            with open(self.env_file_path, 'w', encoding='utf-8') as f:
                f.write("# CADAgent Configuration\n")
                f.write("# This file is automatically generated and managed by CADAgent\n\n")
                for key, value in env_vars.items():
                    # Don't quote values to match the existing load_env_file() parser
                    f.write(f"{key}={value}\n")
            
            self.app.log(f'CADAgent: Successfully wrote .env file to {self.env_file_path}')
            return True
            
        except Exception as e:
            self.app.log(f'CADAgent: Error writing .env file: {e}')
            return False
    
    def get_active_design(self):
        """
        Get the currently active design.
        
        Returns:
            adsk.fusion.Design: Active design or None
        """
        try:
            product = self.app.activeProduct
            if product and hasattr(product, 'designType'):
                return product
            return None
        except:
            return None
    
    def get_root_component(self):
        """
        Get the root component of the active design.
        
        Returns:
            adsk.fusion.Component: Root component or None
        """
        design = self.get_active_design()
        if design:
            return design.rootComponent
        return None
    
    def clear_existing_bodies(self):
        """
        Clear existing bodies from the design.
        Used before importing new geometry.
        
        Returns:
            bool: True if successful
        """
        try:
            root_comp = self.get_root_component()
            if not root_comp:
                return False
            
            # Remove all bodies
            bodies_to_remove = []
            for i in range(root_comp.bRepBodies.count):
                body = root_comp.bRepBodies.item(i)
                if not body.isTransient:
                    bodies_to_remove.append(body)
            
            for body in bodies_to_remove:
                try:
                    body.deleteMe()
                except:
                    # Continue if deletion fails
                    pass
            
            return True
            
        except Exception as e:
            self.app.log(f'CADAgent: Failed to clear bodies: {str(e)}')
            return False
    
    def import_step_file(self, step_file_path):
        """
        Import a STEP file into the current design.
        
        Args:
            step_file_path (str): Path to STEP file
            
        Returns:
            bool: True if successful
        """
        try:
            root_comp = self.get_root_component()
            if not root_comp:
                return False
            
            # Create import manager and options
            import_manager = self.app.importManager
            step_options = import_manager.createSTEPImportOptions(step_file_path)
            
            # Configure import options
            step_options.isViewFit = True
            
            # Execute import - Fusion 360 handles transactions automatically
            import_manager.importToTarget(step_options, root_comp)
            
            # Refresh viewport
            self.app.activeViewport.refresh()
            
            return True
            
        except Exception as e:
            self.app.log(f'CADAgent: Failed to import STEP file: {str(e)}')
            return False
    
    def fit_view(self):
        """Fit the view to show all geometry."""
        try:
            self.app.activeViewport.fit()
        except:
            pass
    
    def show_message(self, title, message):
        """
        Show a message box to the user.

        Args:
            title (str): Message title
            message (str): Message content
        """
        try:
            self.ui.messageBox(message, title)
        except:
            # Fallback to logging
            self.app.log(f'{title}: {message}')

    def store_api_key(self, api_key):
        """
        Store API key in .env file for global persistence across all designs and sessions.
        Also updates os.environ runtime cache and design attributes as backup.

        Args:
            api_key (str): The Anthropic API key to store

        Returns:
            bool: True if successful, False otherwise
        """
        try:
            # Primary storage: Write to .env file (persists globally)
            env_vars = self._read_env_file()
            env_vars['ANTHROPIC_API_KEY'] = api_key
            env_file_success = self._write_env_file(env_vars)

            if env_file_success:
                self.app.log('CADAgent: API key stored successfully in .env file')
                # CRITICAL: Also update os.environ runtime cache
                os.environ['ANTHROPIC_API_KEY'] = api_key
                self.app.log('CADAgent: API key updated in os.environ runtime cache')
            else:
                self.app.log('CADAgent: Warning - failed to store API key in .env file')
            
            # Secondary storage: Design attributes (legacy/backup method)
            design_attr_success = False
            design = self.get_active_design()
            if design:
                try:
                    # Remove existing attribute if present
                    try:
                        existing = design.attributes.itemByName("CADAgent", "anthropic_api_key")
                        if existing:
                            existing.deleteMe()
                    except:
                        pass
                    
                    # Store the API key as a design attribute
                    design.attributes.add("CADAgent", "anthropic_api_key", api_key)
                    design_attr_success = True
                    self.app.log('CADAgent: API key also stored in design attributes (backup)')
                except Exception as e:
                    self.app.log(f'CADAgent: Could not store in design attributes: {e}')
            else:
                self.app.log('CADAgent: No active design - skipping design attribute storage')
            
            # Consider it successful if .env file write succeeded (primary method)
            return env_file_success

        except Exception as e:
            self.app.log(f'CADAgent: Failed to store API key: {str(e)}')
            return False

    def retrieve_api_key(self):
        """
        Retrieve cached API key from multiple sources with priority order:
        1. .env file (global persistence - PRIMARY)
        2. Design attributes (legacy/backup method)

        Returns:
            str: The stored API key or None if not found
        """
        try:
            self.app.log('CADAgent: Starting API key retrieval...')
            
            # PRIMARY: Check .env file first (global persistence)
            env_vars = self._read_env_file()
            env_api_key = env_vars.get('ANTHROPIC_API_KEY', '')
            if env_api_key:
                self.app.log(f'CADAgent: Retrieved API key from .env file, length={len(env_api_key)}')
                return env_api_key
            else:
                self.app.log('CADAgent: No API key found in .env file')
            
            # BACKUP: Check design attributes (legacy method)
            design = self.get_active_design()
            if design:
                self.app.log('CADAgent: Active design found, checking for cached API key attribute...')
                try:
                    attr = design.attributes.itemByName("CADAgent", "anthropic_api_key")
                    if attr and attr.value:
                        self.app.log(f'CADAgent: Retrieved API key from design attributes (backup), length={len(attr.value)}')
                        # Migrate to .env file for future use
                        self.app.log('CADAgent: Migrating API key from design attributes to .env file...')
                        env_vars['ANTHROPIC_API_KEY'] = attr.value
                        if self._write_env_file(env_vars):
                            self.app.log('CADAgent: Successfully migrated API key to .env file')
                        return attr.value
                    else:
                        self.app.log('CADAgent: No cached API key attribute found')
                except Exception as attr_e:
                    self.app.log(f'CADAgent: Error accessing design attribute: {str(attr_e)}')
            else:
                self.app.log('CADAgent: No active design found for attribute check')
            
            self.app.log('CADAgent: No API key found in any storage location')
            return None

        except Exception as e:
            self.app.log(f'CADAgent: Failed to retrieve API key: {type(e).__name__}: {str(e)}')
            import traceback
            self.app.log(f'CADAgent: Traceback: {traceback.format_exc()}')
            return None

    def clear_api_key(self):
        """
        Clear stored API key from all storage locations:
        1. .env file (global persistence - PRIMARY)
        2. os.environ (runtime memory cache)
        3. Design attributes (legacy/backup method)

        Returns:
            bool: True if successful or key didn't exist, False on error
        """
        try:
            cleared_any = False

            # PRIMARY: Clear from .env file
            env_vars = self._read_env_file()
            if 'ANTHROPIC_API_KEY' in env_vars:
                del env_vars['ANTHROPIC_API_KEY']
                if self._write_env_file(env_vars):
                    self.app.log('CADAgent: API key cleared from .env file')
                    cleared_any = True
                else:
                    self.app.log('CADAgent: Warning - failed to clear API key from .env file')
            else:
                self.app.log('CADAgent: No API key found in .env file to clear')

            # CRITICAL: Also clear from os.environ (runtime memory)
            if 'ANTHROPIC_API_KEY' in os.environ:
                del os.environ['ANTHROPIC_API_KEY']
                self.app.log('CADAgent: API key cleared from os.environ runtime cache')
                cleared_any = True
            else:
                self.app.log('CADAgent: No API key found in os.environ to clear')
            
            # BACKUP: Clear from design attributes (legacy method)
            design = self.get_active_design()
            if design:
                try:
                    existing = design.attributes.itemByName("CADAgent", "anthropic_api_key")
                    if existing:
                        existing.deleteMe()
                        self.app.log('CADAgent: API key cleared from design attributes')
                        cleared_any = True
                    else:
                        self.app.log('CADAgent: No API key found in design attributes to clear')
                except:
                    # Attribute doesn't exist, which is fine
                    pass
            
            if cleared_any:
                self.app.log('CADAgent: API key successfully cleared from all storage locations')
            else:
                self.app.log('CADAgent: No API key found in any storage location')
            
            return True

        except Exception as e:
            self.app.log(f'CADAgent: Failed to clear API key: {str(e)}')
            return False
